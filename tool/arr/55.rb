#55. 跳跃游戏
# 给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。
#
# 数组中的每个元素代表你在该位置可以跳跃的最大长度。
#
# 判断你是否能够到达最后一个下标。
#
# 示例 1：
# 输入：nums = [2,3,1,1,4]
# 输出：true
# 解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。
#
# 示例 2：
# 输入：nums = [3,2,1,0,4]
# 输出：false
# 解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。

# 贪心算法: 满足局部最优解,最优子结构
def can_jump(nums)
  temp = nums[0]
  n = nums.length - 1
  for i in 0..n
    # 如果要跳的格数 比 当前下标还要小,就意味着越跳越回退了,永远到达不了最右端
    return false if temp < i
    # nums[i] + i 为 下一个元素的位置,temp为上一个元素的位置,
    # 如果所有位置中最大的位置大于数组的长度,则可以到达
    temp = [nums[i] + i , temp].max
    return temp >= n
  end
end


nums = [3,2,1,1,4]
result = can_jump(nums)
puts result.to_s